from bs4 import BeautifulSoup
from tqdm import tqdm
import json
import numpy as np

#filepath 코드로 xml_path 뽑아서 진행
#coco에 맞게 json 만들기

coco = dict()
images = []
annotations = []
idcount = 1
labeldict = dict()
labelcount = 1
imwanno = []
annoidcount = 1
catids = []

for xml in tqdm(xml_path):
    path = xml[0].replace(xml[0].split('/')[-1], '')
    xml = BeautifulSoup(open(xml[0], encoding='utf-8'),'xml')

    # 있어야 할 라벨 =/= 있는 라벨이므로 이 정보는 쓰지 않음
    # for label in xml.select('label'):
    #     lbname = label.text.strip()
    #     if lbname not in labeldict:
    #         labeldict[lbname] = labelcount
    #         labelcount += 1

    for im in xml.select('image'):
        # filename = path + im['name']
        filename = im['name']
        height = int(im['height'])
        width = int(im['width'])
        # id = idcount + im['id'] - 1
        id = idcount        
        images.append(
            {
             'id':id,
             'width': width,
             'height': height,
             'file_name': filename
            }
        )
        idcount += 1
        
        for polygon in im.select('polygon'):
            annoid = annoidcount            
            #폴리곤 읽으면서 라벨 딕셔너리 만듬
            label = polygon['label']            
            if label not in labeldict:
                labeldict[label] = labelcount
                labelcount +=1
            objid = labeldict[label]
            segmentation = list(np.array([p.split(',') for p in polygon['points'].split(";")]).flatten().astype(float))          
            #area, bbox 구하기
            x = []
            y = []
            for i, f in enumerate(segmentation):
                if i%2==0:
                    x.append(f)
                else:
                    y.append(f)
            area = 0.5*np.abs(np.dot(x,np.roll(y,1))-np.dot(y,np.roll(x,1)))
            bbox = [np.min(x), np.min(y), np.max(x)-np.min(x), np.max(y)-np.min(y)]            
            annotations.append(
                {
                 'id': annoid,
                 'image_id': id,
                 'category_id': objid,
                 'segmentation': [segmentation],
                 'area': area,
                 'bbox': bbox,
                 'iscrowd': 0
                }
            )
            annoidcount += 1
            imwanno.append(id)
            catids.append(objid)
 
imwanno = list(set(imwanno))
catids = list(set(catids))

coco = {
    'images': images,
    'annotations' : annotations
}        
print(' ')
print('이미지 개수:', len(images))
print('사물 개수:', len(annotations))
print('사물 있는 이미지 개수:',len(imwanno))
print('사물 종류 개수:', len(catids))
print('saving json...')
json_object = json.dumps(coco)
with open('./coco.json', 'w', encoding='utf-8') as make_file:  
    make_file.write(json_object)
print('json saved!')
